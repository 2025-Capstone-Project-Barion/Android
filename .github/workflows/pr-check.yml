name: Barrion PR Check
on:
  pull_request:
    branches: [ main, develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # ===== CI (Continuous Integration) 부분 =====
      # 코드 가져오기
      - uses: actions/checkout@v4

      # 자바 개발 환경 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      # Gradle 실행 권한 및 설정
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Setup Gradle
        run: |
          echo "org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=1g -Dkotlin.daemon.jvm.options=-Xmx2g" >> gradle.properties
          echo "org.gradle.parallel=true" >> gradle.properties

      # 코드 품질 검사
      - name: Run Lint
        run: ./gradlew lint

      # 단위 테스트 실행
      - name: Run Unit Tests
        run: ./gradlew testDebugUnitTest

      # 컴파일 검사
      - name: Check Compilation
        run: ./gradlew compileDebugSources

      # APK 빌드
      - name: Build Debug APK
        run: ./gradlew assembleDebug

      # ===== CD (Continuous Delivery) 준비 부분 =====
      # 빌드 결과물 저장
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: barrion-debug
          path: app/build/outputs/apk/debug/app-debug.apk

      # 참고: 완전한 CD 파이프라인을 구성하려면 아래와 같은 단계가 추가될 수 있습니다
      # - Firebase App Distribution으로 배포
      # - Play Store 내부 테스트 트랙에 업로드
      # - Slack 또는 Teams로 알림 전송
      # 현재는 APK 아티팩트 저장까지만 구현되어 있습니다